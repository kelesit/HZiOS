//
//  FristSection.h
//  C语言基础
//
//  Created by 华天杰 on 2018/10/24.
//  Copyright © 2018年 BQ. All rights reserved.
//

#ifndef FristSection_h
#define FristSection_h

#include <stdio.h>

/*
   (1)贝尔实验室开发UNIX操作系统时设计了C语言， B语言 ==》 C语言【简洁、紧凑、快速、可移植】
  （2）汇编语言是为CPU【中央处理单元】设计的一系列内部指令，使用助记符来表示，不同的CPU系列使用不同的汇编语言；
  （3）C编译器（把C代码转换成计算机内部指令的程序）
  （4）利用C可以访问硬件、操控内存中的位
   (5) 面向对象编程是一门哲学，它通过对语言建模来适应问题，而不是对问题建模以适应语言；
   (6) C语言都能做哪些{ UNIX操作系统、计算机游戏、嵌入式系统、计算机语言的编译器，现代化设备的微处理器  }
   (7) 计算机的组成部分{
     CPU【中央处理单元】【控制器+运算器】 ：承担绝大部分的运算工作
         CPU从内存中获取一条指令并执行，然后再获取执行，诸如此类，【1GHz的CPU一秒钟大约能重复这样的操作10亿次】
         CPU有自己的工作区--若干寄存器组成，每个寄存器中都可以存储一个数字[指令的内存地址]
         ① 计算机中所有的内容都是数字
         ②计算机程序最终必须以数字指令码（机器语言）来表示
 
     RAM 【随机存取内存】：存储程序和文件的工作区
     ROM 【永久内存存储设备】{机械硬盘、固态硬盘}
     输入输出设备【显示器、键盘、鼠标】
 }
 （8）C是编译型语言，
 (9)编写C语言的步骤{
   1> 定义程序的目标
     写程序之前脑子中要有清晰的思路，明确自己想要做什么
     ，需要思考程序需要哪些信息，需要进行哪些计算和控制，程序应该报告什么信息
   2> 设计程序
     程序中如何表示数据、用什么方法处理数据
   3> 编写代码
     把设计的程序翻译成C语言
   4> 编译
   5> 运行程序
   6> 测试和调试程序
   7> 维护和修改代码
 
 
 
   --------------------------
 
 (1) 对程序员来讲CPU是什么 : CPU是具有各种功能的寄存器的集合体
    1> 基本解答
 {
 
   + 程序是什么： 指导计算机执行操作的指令集合
   + 程序的组成： 指令 + 数据
   + 机器语言： 能够被CPU理解和执行的语言
   + 运行的程序存储的位置： 内存
   + 内存地址： 内存中存储数据和指令的位置，是一个整型的数值
   + 负责程序解析和运行的是哪个： CPU
 }
    2> CPU的内部解析
   +  程序运行流程： C语言等高级语言编写程序 ---> 编译器将程序编译为机器语言的EXE文件 ---->
      程序运行时在内存中形成EXE的副本---> CPU解释并执行程序内容 【转化成为的机器语言是通过CPU中的寄存器来处理的】
      例如 a = 1 + 2 这样的运算 ---> 转化为机器语言后是通过寄存器进行相加运算和存储的
   + CPU组成的4个部分 ：{
     1 :  寄存器  => 暂存指令、数据处理对象 【一个CPU会包含20~100】
     2 ： 控制器  => 把内存上的指令、数据读入寄存器，并根据指令的执行结果来控制计算机 【控制器的控制内容：控制键盘、鼠标和内存媒介的输入输出】
     3 ： 运算器  => 负责把从内存读到寄存器中的指令和数据进行运算
     4 ： 时钟   => 负责发出CPU开始计时的时钟信号【？】
   }
   + 内存: 控制芯片等与CPU相连接，主要负责存储指令和数据；CPU通过内存地址来读写内存中的数据和指令
   + 程序启动 --> 时钟信号 ---> 控制器从内存中读取指令和数据 【对指令解释和运行】 --->
      运算器对指令进行运算 ---> 控制器根据运算结果控制计算器
 
   3> 寄存器
    根据使用功能的不同，大致分为8类
    累加寄存器：负责存储运算数据和运算的结果数据
    基址寄存器：存储数据内存的起始地址
    标志寄存器： 存储运算处理后的CPU的状态
    指令寄存器 ： 存储指令
    栈寄存器  ： 存储栈区域的起始地址
    通用寄存器 ： 存储任意数据
    变址寄存器 ： 存储基地址寄存器的相对地址
    程序计数器：存储下一条指令所在的内存地址
 
 
      程序计数器  标志寄存器  累加寄存器
      基址寄存器  变址寄存器  通用寄存器
                  |
       CPU就是具有各种功能寄存器的集合
 
     4> 程序计数器：决定程序流程
      程序计数器中存储的是程序的执行指令，CPU的控制器会参照程序计数器中存储的内存地址，去查找相应的指令去执行
     5> 条件分支和循环机制
     CPU进行运算时，标志寄存器的数值会根据运算结果自动设定，条件分支在跳转指令前会进行比较运算
     6> 函数的调用机制
      如何解决函数内部执行完毕后，CPU继续执行函数入口地址下一个程序计数器中存储的指令
      使用机器语言的call指令和return指令可以解决
      call指令：会把调用函数后要执行的指令地址存在栈中，函数执行完毕后再函数的出口执行return指令
      return指令：把保存在栈中指令设置到程序计数器中
     7> 通过地址和索引实现数组 【分割特定的区域，达到连续查看的目的】
     在主内存区域进行内存区域的划分
     基址寄存器 + 变址寄存器
 
      8> 机器语言指令的主要类型和功能
      数据传送指令：寄存器和内存、内存和内存、寄存器和外围设备之间的数据读写操作
      运算指令 ： 累加寄存器执行算数运算、逻辑运算、比较运算和位移运算
      跳转指令： 实现条件分支、循环、强制跳转等
      call/return指令 ： 函数的调用/返回调用前的地址
 
 
 
 */

#endif /* FristSection_h */
